https://leetcode.com/problems/making-a-large-island/?envType=daily-question&envId=2025-01-31

class Solution {
         int[][] dir={{-1,0},{1,0},{0,-1},{0,1}};
    public int largestIsland(int[][] grid) {
        boolean[][] visited=new boolean[grid.length][grid.length];
        int maxVal=Integer.MIN_VALUE;
       
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid.length;j++){
                if(grid[i][j]==0 && !visited[i][j]){
                    grid[i][j]=1;
                    visited[i][j]=true;
                    maxVal=Math.max(maxVal,dfs(grid,visited,0,0));
                    grid[i][j]=0;
                }
            }
        }
            return maxVal;

    }

    public int dfs(int[][] grid,boolean[][] visited,int x,int y){
            int maxCount=Integer.MIN_VALUE;
            int count=1;
            if(x==grid.length-1 && y==grid.length-1){
                maxCount=Math.max(count,maxCount);
                   return maxCount;
            }
            for(int i=0;i<dir.length;i++){
                int newX=x+dir[i][0];
                int newY=y+dir[i][1];
            if(newX>=0 && newX<grid.length && newY>=0 && newY<grid.length && grid[newX][newY]==1 && !visited[newX][newY]){
                visited[newX][newY]=true;
               count+=dfs(grid,visited,newX,newY);
            }
            }

            return maxCount;
    }
}
