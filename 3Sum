https://leetcode.com/problems/3sum/?envType=problem-list-v2&envId=two-pointers

//Recursion
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res=new ArrayList<>();
        List<Integer> list=new ArrayList<>();
        Arrays.sort(nums);
        threeSumRecursion(nums,list,res,0,0);
        return res;
    }

    public void threeSumRecursion(int[] nums,List<Integer> list,List<List<Integer>> res,int sum,int i){
        if(list.size()==3){
            if(sum==0 && !res.contains(list))
             res.add(new ArrayList<>(list));
              return;
        }

        if(i>=nums.length)
            return;
        list.add(nums[i]);
        threeSumRecursion(nums,list,res,sum+nums[i],i+1);
        list.remove(list.size()-1);
        threeSumRecursion(nums,list,res,sum,i+1);
    }
}

